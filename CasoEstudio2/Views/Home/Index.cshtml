@model Calculadora
<h2>Calculadora</h2>


<div class="row">
    <div class="col-sm-12 col-md-5 mt-4">
        <h5 class="row d-flex justify-content-center w-100">Numero 1</h5>
        <div class="input-group mb-3">
            <input class="form-control" id="numero-1" readonly />
            <button class="btn btn-outline-secondary dropdown-toggle" id="btn-base-1" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                @Model.BaseNumero1
            </button>
            <ul class="dropdown-menu dropdown-menu-end">
                @foreach (var baseNumero1 in new[] { "Binario", "Decimal", "Hexadecimal" })
                {
                    <li>
                        <a class="dropdown-item" href="#" data-base-1 onclick="$('#BaseNumero1').val('@baseNumero1'); $('#btn-base-1').text('@baseNumero1');">
                            @baseNumero1
                        </a>
                    </li>
                }
            </ul>
            @Html.HiddenFor(m => m.BaseNumero1, new { id = "BaseNumero1" })
        </div>
        <div class="row d-flex justify-content-center w-100 p-0 m-0">
            <div class="col-12">
                <h5 class="row d-flex justify-content-center w-100">Entrada</h5>
                <div id="tecladoVirtual1"></div>

            </div>
        </div>
        <br />
        <div class="row d-flex justify-content-center w-100 p-0 m-0">
            <div class="col-12">
                <h5 class="row d-flex justify-content-center w-100">Prevista</h5>
                <div class="row d-flex justify-content-center w-100">
                    <b class="col-4 d-flex justify-content-end">Binario:</b>
                    <div class="col-8" id="numero1_binario">0000</div>
                </div>

                <div class="row d-flex justify-content-center w-100">
                    <b class="col-4 d-flex justify-content-end">Decimal:</b>
                    <div class="col-8" id="numero1_decimal">0</div>
                </div>

                <div class="row d-flex justify-content-center w-100">
                    <b class="col-4 d-flex justify-content-end">Hexadecimal:</b>
                    <div class="col-8" id="numero1_hexadecimal">0</div>
                </div>

                <br />

                <div class="row d-flex justify-content-center w-100">
                    <div id="tecladoBinario1"></div>
                </div>
            </div>
        </div>

    </div>
    <div class="col-sm-12 col-md-2 mt-4">
        <div>
            <h5 for="Operacion">Operación:</h5>
            @Html.DropDownListFor(m => m.Operacion, new SelectList(new[] { "AND", "OR", "XOR", "Desplazar Izquierda", "Desplazar Derecha" }), new { @class = "form-control", @id = "operacion" })
        </div>
    </div>
    <div class="col-sm-12 col-md-5 mt-4">
        <h5 class="row d-flex justify-content-center w-100">Numero 2</h5>
        <div class="input-group mb-3">
            <input class="form-control" id="numero-2" readonly />
            <button class="btn btn-outline-secondary dropdown-toggle" id="btn-base-2" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                @Model.BaseNumero2
            </button>
            <ul class="dropdown-menu dropdown-menu-end">
                @foreach (var baseNumero2 in new[] { "Binario", "Decimal", "Hexadecimal" })
                {
                    <li>
                        <a class="dropdown-item" href="#" data-base-2 onclick="$('#BaseNumero2').val('@baseNumero2'); $('#btn-base-2').text('@baseNumero2');">
                            @baseNumero2
                        </a>
                    </li>
                }
            </ul>
            @Html.HiddenFor(m => m.BaseNumero2, new { id = "BaseNumero2" })
        </div>
        <div class="row d-flex justify-content-center w-100 p-0 m-0">
            <div class="col-12">
                <h5 class="row d-flex justify-content-center w-100">Entrada</h5>
                <div id="tecladoVirtual2"></div>

            </div>
        </div>
        <br />
        <div class="row d-flex justify-content-center w-100 p-0 m-0">
            <div class="col-12 p-0 m-0">
                <h5 class="row d-flex justify-content-center w-100">Prevista</h5>
                <div class="row d-flex justify-content-center w-100">
                    <b class="col-4 d-flex justify-content-end">Binario:</b>
                    <div class="col-8" id="numero2_binario">0000 0000 0000 0000 0000</div>
                </div>

                <div class="row d-flex justify-content-center w-100">
                    <b class="col-4 d-flex justify-content-end">Decimal:</b>
                    <div class="col-8" id="numero2_decimal">0</div>
                </div>

                <div class="row d-flex justify-content-center w-100">
                    <b class="col-4 d-flex justify-content-end">Hexadecimal:</b>
                    <div class="col-8" id="numero2_hexadecimal">0</div>
                </div>

                <br />

                <div class="row d-flex justify-content-center w-100 p-0 m-0">
                    <div id="tecladoBinario2"></div>
                </div>
            </div>
        </div>

    </div>
</div>
<div style="height: 150px;" />
<br />
<div class="row d-flex justify-content-center" style="position: fixed; bottom: 0; left:5vw; right: 5vw; height: 150px; background-color: #fff; z-index: 2; box-shadow: rgba(0, 0, 0, 0.35) 0px 5px 15px; border-radius: 25px 25px 0 0;">
    <div class="col-sm-12 col-md-10">
        <h3 class="row d-flex justify-content-center w-100 mt-4">Resultado</h3>
        <div class="input-group mb-3">
            <input class="form-control" id="resultado" readonly />
            <button class="btn btn-outline-secondary dropdown-toggle" id="btn-base-resultado" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                @Model.BaseResultado
            </button>
            <ul class="dropdown-menu dropdown-menu-end">
                @foreach (var baseResultado in new[] { "Binario", "Decimal", "Hexadecimal" })
                {
                    <li>
                        <a class="dropdown-item" href="#" data-base-resultado onclick="$('#BaseResultado').val('@baseResultado'); $('#btn-base-resultado').text('@baseResultado');">
                            @baseResultado
                        </a>
                    </li>
                }
            </ul>
            @Html.HiddenFor(m => m.BaseResultado, new { id = "BaseResultado" })
        </div>
    </div>
</div>




<script>
    var numeros = ["1", "2"];
    var numero1 = "";
    var numero2 = "";

    //Aplicar la misma configuracion para las 2 entradas
    for (let numero of numeros) {

        // Función para generar el teclado virtual en base a la base seleccionada
        function generarTecladoVirtual(numero, _base = null) {
            let tecladoVirtual = document.getElementById(_base == "Binario" ? `tecladoBinario${numero}` : `tecladoVirtual${numero}`);
            let baseSelect = document.getElementById(`btn-base-${numero}`);

            var base = _base ?? baseSelect.innerText.trim();
            var html = "";

            //Si ya seleccionamos un teclado binario, no mostrar doble teclados
            if (_base == "Binario" && baseSelect.innerText.trim() == "Binario") {
                tecladoVirtual.innerHTML = html;
                return;
            }

            //Mostrar teclado dependiendo de la seleccion de base
            if (base === "Binario") {
                html = generarTecladoBinario(numero);
            } else if (base === "Decimal") {
                html = generarTecladoDecimal(numero);
            } else if (base === "Hexadecimal") {
                html = generarTecladoHexadecimal(numero);
            }

            tecladoVirtual.innerHTML = html;
        }

        // Función para generar el teclado decimal
        function generarTecladoDecimal(numero) {
            var html = `<table class="w-100">`;
            for (var i = 0; i < 3; i++) {
                html += `<tr class="row w-100 p-0 m-0">`;
                for (var j = 0; j < 3; j++) {
                    var valor = 1 + (i * 3) + j;
                    if (valor > 0 && valor < 10) {
                        html += `<td class="col-4 p-0 m-0"><button class="btn btn-light w-100 border" onclick="ingresarValor(this, ${numero}, null, 'Decimal')">${valor}</button></td>`;
                    } else {
                        html += `<td class="col-4 p-0 m-0"></td>`;
                    }
                }
                html += "</tr>";
            }

            //Boton para limpiar valores + boton para el numero 0
            html += `<tr class="row w-100 p-0 m-0">`;
            html += `<td class="col-4 p-0 m-0"></td>`;
            html += `<td class="col-4 p-0 m-0"><button class="btn btn-light w-100 border" onclick="ingresarValor(this, ${numero}, null, 'Decimal')">0</button></td>`;
            html += `<td class="col-4 p-0 m-0"><button class="btn btn-danger w-100 border" onclick="limpiarValor(${numero})">Limpiar</button></td>`;
            html += "</tr>";
            html += "</table>";
            return html;
        }

        // Función para generar el teclado hexadecimal
        function generarTecladoHexadecimal(numero) {
            var html = `<table class="w-100">`;
            var valoresHex = ["A", "1", "2", "3", "B", "4", "5", "6", "C", "7", "8", "9", "D", "E", "F", "0"];
            for (var i = 0; i < 4; i++) {
                html += `<tr class="row w-100 p-0 m-0">`;
                for (var j = 0; j < 4; j++) {
                    var valor = valoresHex[i * 4 + j];
                    html += `<td class="col-3 p-0 m-0"><button class="btn btn-light w-100 border" onclick="ingresarValor(this, ${numero}, null, 'Hexadecimal')">${valor}</button></td>`;
                }
                html += "</tr>";
            }

            //Boton para limpiar valores
            html += `<tr class="row w-100 p-0 m-0">`;
            html += `<td class="col-3 p-0 m-0"><button class="btn btn-danger w-100 border" onclick="limpiarValor(${numero})">Limpiar</button></td>`;
            html += `<td class="col-3 p-0 m-0"></td>`;
            html += `<td class="col-3 p-0 m-0"></td>`;
            html += `<td class="col-3 p-0 m-0"></td>`;
            html += "</tr>";
            html += "</table>";
            return html;
        }

        // Función para generar el teclado binario
        function generarTecladoBinario(numero) {
            let previsualizacionBinario = document.getElementById(`numero${numero}_binario`);

            var html = `<table class="w-100">`;
            for (var i = 0; i < 5; i++) {
                html += `<tr class="row w-100 p-0 m-0">`;
                for (var j = 0; j < 4; j++) {
                    if (j == 0) {
                        html += `<td class="col-2 m-0 d-flex justify-content-end">
                                    <div class="align-self-center">${16 - (i * 4)}</div>
                                </td>`
                    }
                    var indice = i * 4 + j;
                    html += `<td class="col-2 p-0 m-0"><button class="btn btn-light w-100 border" onclick="ingresarValor(this, ${numero}, ${indice},'Binario')">${previsualizacionBinario.innerText.replace(/\s/g, '').substring(indice, indice + 1)}</button></td>`;
                }
                html += "</tr>";
            }

            //Boton para limpiar valores
            html += `<tr class="row w-100 p-0 m-0">`;
            html += `<td class="col-2 p-0 m-0"></td>`;
            html += `<td class="col-8 p-0 m-0"><button class="btn btn-danger w-100 border" onclick="limpiarValor(${numero})">Limpiar</button></td>`;
            html += "</tr>";

            html += "</table>";
            return html;
        }

        // Función para manejar el ingreso de valores desde el teclado virtual
        function ingresarValor(boton, numero, indice, baseSeleccionada) {
            var valor = boton.innerText.trim();

            //Valores se guardan en la previsualizacion/prevista
            let previsualizacionDecimal = document.getElementById(`numero${numero}_decimal`);
            let previsualizacionBinario = document.getElementById(`numero${numero}_binario`);
            let previsualizacionHexadecimal = document.getElementById(`numero${numero}_hexadecimal`);

            if (baseSeleccionada === "Binario") {
                valor = valor === "0" ? "1" : "0";
                boton.innerText = valor;
                previsualizacionBinario.innerText = setCharAt(previsualizacionBinario.innerText.replace(/\s/g, ''), indice, valor).replace(/(\d{4})/g, '$1 ').trim();
            } else if (baseSeleccionada === "Decimal") {
                previsualizacionDecimal.innerText = parseInt(previsualizacionDecimal.innerText + valor).toString();
            } else if (baseSeleccionada === "Hexadecimal") {
                previsualizacionHexadecimal.innerText = previsualizacionHexadecimal.innerText == "0" ? valor : previsualizacionHexadecimal.innerText + valor;
        }

            // Actualizar las previsualizaciones de las otras bases haciendo la conversion

            //Para binario, trae el valor desde Decimal o Hexadecimal dependiendo de lo que se utilizo para ingresar el valor
            if (baseSeleccionada !== "Binario") {
                previsualizacionBinario.innerText = parseInt(baseSeleccionada === "Decimal" ? previsualizacionDecimal.innerText : previsualizacionHexadecimal.innerText, baseSeleccionada === "Decimal" ? 10 : 16).toString(2).padStart(20, '0').replace(/(\d{4})/g, '$1 ').trim();
            }

            //Para decimal, trae el valor desde binario
            if (baseSeleccionada !== "Decimal") {
                previsualizacionDecimal.innerText = parseInt(previsualizacionBinario.innerText.replace(/\s/g, ''), 2).toString();
            }

            //Para hexadecimal, trae el valor desde binario
            if (baseSeleccionada !== "Hexadecimal") {
                previsualizacionHexadecimal.innerText = parseInt(previsualizacionBinario.innerText.replace(/\s/g, ''), 2).toString(16).toUpperCase();
            }

            refrescarVista(numero)
        }

        // Función para volver a cargar teclados y refrescar todos los datos
        function refrescarVista(numero) {
            generarTecladoVirtual(numero, "Binario");
            generarTecladoVirtual(numero);
            actualizarPrevisualizacionValor(numero);
            calcularResultado();
        }

        // Escucha el evento de cambio de selección de base
        document.getElementById(`btn-base-${numero}`).addEventListener("click", function () {
            refrescarVista(numero)
        });

        document.querySelectorAll(`[data-base-${numero}]`).forEach(item => {
            item.addEventListener("click", function () {
                refrescarVista(numero)
            });
        });


        // Función para actualizar la previsualización del valor ingresado
        function actualizarPrevisualizacionValor(numero) {
            let baseSeleccionada = document.getElementById(`btn-base-${numero}`).innerText.trim();
            let valorNumero = document.getElementById(`numero-${numero}`)

            if (baseSeleccionada == "Binario") {
                valorNumero.value = document.getElementById(`numero${numero}_binario`).innerText;
            }
            if (baseSeleccionada == "Decimal") {
                valorNumero.value = document.getElementById(`numero${numero}_decimal`).innerText;
            }
            if (baseSeleccionada == "Hexadecimal") {
                valorNumero.value = document.getElementById(`numero${numero}_hexadecimal`).innerText;
            }
        }

        // Función para limpiar el valor actual
        function limpiarValor(numero) {
            let previsualizacionDecimal = document.getElementById(`numero${numero}_decimal`);
            let previsualizacionBinario = document.getElementById(`numero${numero}_binario`);
            let previsualizacionHexadecimal = document.getElementById(`numero${numero}_hexadecimal`);

            previsualizacionDecimal.innerText = "0";
            previsualizacionBinario.innerText = "0000 0000 0000 0000 0000";
            previsualizacionHexadecimal.innerText = "0";

            refrescarVista(numero)
        }

        // Función para setear un carácter en una posición específica de una cadena
        function setCharAt(str, indice, char) {
            if (indice > str.length - 1) {
                str = str.padEnd(indice + 1, '0');
            }
            return str.substr(0, indice) + char + str.substr(indice + 1);
        }

        // Función para calcular el resultado de la operación
        function calcularResultado() {
            let numero1 = parseInt(document.getElementById("numero1_decimal").innerText);
            let numero2 = parseInt(document.getElementById("numero2_decimal").innerText);
            let operacion = document.getElementById("operacion").value;
            let resultado;

            switch (operacion) {
                case "AND":
                    resultado = numero1 & numero2;
                    break;
                case "OR":
                    resultado = numero1 | numero2;
                    break;
                case "XOR":
                    resultado = numero1 ^ numero2;
                    break;
                case "Desplazar Izquierda":
                    resultado = numero1 << numero2;
                    break;
                case "Desplazar Derecha":
                    resultado = numero1 >> numero2;
                    break;
            }

            let baseSeleccionada = document.getElementById("btn-base-resultado").innerText.trim();
            let inputResultado = document.getElementById("resultado");

            if (baseSeleccionada === "Binario") {
                inputResultado.value = resultado.toString(2).padStart(20, '0').replace(/(\d{4})/g, '$1 ').trim();
            } else if (baseSeleccionada === "Decimal") {
                inputResultado.value = resultado.toString();
            } else if (baseSeleccionada === "Hexadecimal") {
                inputResultado.value = resultado.toString(16).toUpperCase();
            }
        }


        // Escucha eventos de cambio de selección de base del resultado
        document.getElementById(`btn-base-resultado`).addEventListener("click", function () {
            calcularResultado();
        });

        document.querySelectorAll(`[data-base-resultado]`).forEach(item => {
            item.addEventListener("click", function () {
                calcularResultado();
            });
        });

        document.getElementById(`operacion`).addEventListener("change", function () {
            calcularResultado();
        });

        limpiarValor(numero);

        // Genera el teclado virtual inicial
        generarTecladoVirtual(numero, "Binario");
        generarTecladoVirtual(numero);
    }
</script>